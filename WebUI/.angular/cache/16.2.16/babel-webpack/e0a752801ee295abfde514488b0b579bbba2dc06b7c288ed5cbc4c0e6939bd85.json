{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n    this.loggedIn = false;\n    this.apiUrl = 'https://localhost:5001/api/Account';\n  }\n  login(email, password) {\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/login`, body).pipe(tap(response => {\n      if (response && response.token) {\n        this.loggedIn = true;\n        localStorage.setItem('token', response.token);\n      }\n    }));\n  }\n  logout() {\n    this.loggedIn = false;\n    localStorage.removeItem('token'); // Remove token on logout\n  }\n\n  isLoggedIn() {\n    return this.loggedIn || !!localStorage.getItem('token'); // Check token presence\n  }\n\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData);\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","AccountService","constructor","http","loggedIn","apiUrl","login","email","password","body","post","pipe","response","token","localStorage","setItem","logout","removeItem","isLoggedIn","getItem","register","userData","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\MyProfile\\WebUI\\WebUI\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { User } from '../models/user';\r\nimport { LoginResponse } from '../models/loginResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n  private loggedIn = false;\r\n  private apiUrl = 'https://localhost:5001/api/Account';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(email: string, password: string): Observable<LoginResponse> {\r\n    const body = { email, password };\r\n    return this.http.post(`${this.apiUrl}/login`, body).pipe(\r\n      tap(response => {        \r\n        if (response && response.token) {\r\n          this.loggedIn = true;\r\n          localStorage.setItem('token', response.token);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    this.loggedIn = false;\r\n    localStorage.removeItem('token'); // Remove token on logout\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.loggedIn || !!localStorage.getItem('token'); // Check token presence\r\n  }\r\n\r\n  register(userData: User): Observable<any> {\r\n    return this.http.post(`${this.apiUrl }/register`, userData);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAOtC,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,QAAQ,GAAG,KAAK;IAChB,KAAAC,MAAM,GAAG,oCAAoC;EAEb;EAExCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,IAAI,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IAChC,OAAO,IAAI,CAACL,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAEI,IAAI,CAAC,CAACE,IAAI,CACtDX,GAAG,CAACY,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACT,QAAQ,GAAG,IAAI;QACpBU,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;;IAEjD,CAAC,CAAC,CACH;EACH;EAEAG,MAAMA,CAAA;IACJ,IAAI,CAACZ,QAAQ,GAAG,KAAK;IACrBU,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACpC;;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACd,QAAQ,IAAI,CAAC,CAACU,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC3D;;EAEAC,QAAQA,CAACC,QAAc;IACrB,OAAO,IAAI,CAAClB,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,MAAO,WAAW,EAAEgB,QAAQ,CAAC;EAC7D;;;uBA7BWpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdxB,cAAc;MAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}