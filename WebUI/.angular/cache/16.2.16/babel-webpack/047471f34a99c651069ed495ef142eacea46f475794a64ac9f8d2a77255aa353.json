{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction NavbarComponent_nav_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"nav\")(1, \"ul\")(2, \"li\")(3, \"a\", 1);\n    i0.ɵɵtext(4, \"View Profile\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"li\")(6, \"a\", 2);\n    i0.ɵɵtext(7, \"View/Add Work Experience\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"li\")(9, \"a\", 3);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_nav_0_Template_a_click_9_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.logout());\n    });\n    i0.ɵɵtext(10, \"Logout\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nexport class NavbarComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  isLoggedIn() {\n    return this.accountService.isLoggedIn(); // Implement this method in your AuthService\n  }\n\n  logout() {\n    this.accountService.logout(); // Implement this method to handle logout\n    this.router.navigate(['/login']); // Redirect to login page after logout\n  }\n\n  static {\n    this.ɵfac = function NavbarComponent_Factory(t) {\n      return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NavbarComponent,\n      selectors: [[\"app-navbar\"]],\n      decls: 1,\n      vars: 1,\n      consts: [[4, \"ngIf\"], [\"routerLink\", \"/profile\"], [\"routerLink\", \"/workexperience\"], [3, \"click\"]],\n      template: function NavbarComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, NavbarComponent_nav_0_Template, 11, 0, \"nav\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoggedIn());\n        }\n      },\n      dependencies: [i3.NgIf, i2.RouterLink],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","NavbarComponent_nav_0_Template_a_click_9_listener","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","logout","NavbarComponent","constructor","accountService","router","isLoggedIn","navigate","ɵɵdirectiveInject","i1","AccountService","i2","Router","selectors","decls","vars","consts","template","NavbarComponent_Template","rf","ctx","ɵɵtemplate","NavbarComponent_nav_0_Template","ɵɵproperty"],"sources":["C:\\MyProfile\\WebUI\\WebUI\\src\\app\\navbar\\navbar.component.ts","C:\\MyProfile\\WebUI\\WebUI\\src\\app\\navbar\\navbar.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AccountService } from '../_services/account.service';\r\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent {\n  constructor(private accountService: AccountService, private router: Router) { }\n\n  isLoggedIn(): boolean {\n    return this.accountService.isLoggedIn(); // Implement this method in your AuthService\n  }\n\n  logout() {\n    this.accountService.logout(); // Implement this method to handle logout\n    this.router.navigate(['/login']); // Redirect to login page after logout\n  }\n}\n","<nav *ngIf=\"isLoggedIn()\">\r\n  <ul>\r\n    <li><a routerLink=\"/profile\">View Profile</a></li>\r\n    <li><a routerLink=\"/workexperience\">View/Add Work Experience</a></li>\r\n    <li><a (click)=\"logout()\">Logout</a></li>\r\n  </ul>\r\n</nav>\r\n"],"mappings":";;;;;;;ICAAA,EAAA,CAAAC,cAAA,UAA0B;IAEOD,EAAA,CAAAE,MAAA,mBAAY;IAAAF,EAAA,CAAAG,YAAA,EAAI;IAC7CH,EAAA,CAAAC,cAAA,SAAI;IAAgCD,EAAA,CAAAE,MAAA,+BAAwB;IAAAF,EAAA,CAAAG,YAAA,EAAI;IAChEH,EAAA,CAAAC,cAAA,SAAI;IAAGD,EAAA,CAAAI,UAAA,mBAAAC,kDAAA;MAAAL,EAAA,CAAAM,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAR,EAAA,CAAAS,aAAA;MAAA,OAAST,EAAA,CAAAU,WAAA,CAAAF,MAAA,CAAAG,MAAA,EAAQ;IAAA,EAAC;IAACX,EAAA,CAAAE,MAAA,cAAM;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;ADKxC,OAAM,MAAOS,eAAe;EAC1BC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;EAAY;EAE9EC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,cAAc,CAACE,UAAU,EAAE,CAAC,CAAC;EAC3C;;EAEAL,MAAMA,CAAA;IACJ,IAAI,CAACG,cAAc,CAACH,MAAM,EAAE,CAAC,CAAC;IAC9B,IAAI,CAACI,MAAM,CAACE,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;;;;uBAVWL,eAAe,EAAAZ,EAAA,CAAAkB,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAApB,EAAA,CAAAkB,iBAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;YAAfV,eAAe;MAAAW,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCT5B7B,EAAA,CAAA+B,UAAA,IAAAC,8BAAA,kBAMM;;;UANAhC,EAAA,CAAAiC,UAAA,SAAAH,GAAA,CAAAd,UAAA,GAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}