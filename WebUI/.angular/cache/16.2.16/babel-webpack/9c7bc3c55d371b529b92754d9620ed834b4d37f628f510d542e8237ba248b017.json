{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ProfileComponent = class ProfileComponent {\n  constructor(profileService, router) {\n    this.profileService = profileService;\n    this.router = router;\n    this.selectedFile = null;\n    this.isEditing = false;\n    this.isAddingSkill = false;\n    this.newSkill = '';\n    this.isAddingCertificate = false;\n    this.newCertificate = '';\n  }\n  ngOnInit() {\n    this.fetchProfile();\n  }\n  fetchProfile() {\n    this.profileService.getProfile().subscribe(data => {\n      this.profile = data;\n      // Check if skills have values and extract them\n      if (this.profile.skills && this.profile.skills.$values) {\n        this.profile.skills = this.profile.skills.$values.map(skill => skill.name);\n      } else {\n        this.profile.skills = []; // Ensure skills is an array\n      }\n\n      console.log('Fetched profile:', this.profile);\n    }, error => {\n      console.error('Error fetching profile data', error);\n    });\n  }\n  // Toggle edit mode\n  toggleEdit() {\n    this.isEditing = !this.isEditing;\n  }\n  // Update the profile details\n  updateProfile() {\n    const updatedData = {\n      name: this.profile.name,\n      phone: this.profile.phone,\n      email: this.profile.email,\n      age: this.profile.age,\n      address: this.profile.address\n    };\n    this.profileService.updateProfile(updatedData).subscribe(response => {\n      console.log('Profile updated successfully', response);\n      this.isEditing = false; // Exit edit mode after successful update\n      this.fetchProfile(); // Refresh the profile data\n    }, error => {\n      console.error('Error updating profile', error);\n    });\n  }\n  // Open file input for editing the profile picture\n  editProfilePicture() {\n    const fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.accept = 'image/*';\n    fileInput.onchange = event => {\n      const target = event.target;\n      if (target.files) {\n        this.selectedFile = target.files[0];\n        this.uploadProfilePicture();\n      }\n    };\n    fileInput.click();\n  }\n  // Upload the selected profile picture\n  uploadProfilePicture() {\n    if (this.selectedFile) {\n      this.profileService.uploadProfilePicture(this.selectedFile).subscribe(response => {\n        console.log('Profile picture uploaded successfully', response);\n        this.fetchProfile(); // Fetch updated profile to reflect new picture URL\n      }, error => {\n        console.error('Error uploading profile picture', error);\n      });\n    }\n  }\n  // Navigate to the work experience section\n  navigateToWorkExperience() {\n    this.router.navigate(['/workexperience']);\n  }\n  // Toggle adding skill form\n  toggleAddSkill() {\n    this.isAddingSkill = !this.isAddingSkill;\n    this.newSkill = ''; // Clear input when toggling\n  }\n  // Add a new skill\n  onAddSkill() {\n    if (this.newSkill) {\n      this.profileService.addSkill(this.newSkill).subscribe(response => {\n        console.log('Skill added successfully:', response);\n        this.fetchProfile(); // Refresh profile to show updated skills\n        this.newSkill = ''; // Clear skill input\n        this.isAddingSkill = false; // Close add skill form\n      }, error => {\n        console.error('Error adding skill:', error);\n      });\n    }\n  }\n};\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);","map":{"version":3,"names":["Component","ProfileComponent","constructor","profileService","router","selectedFile","isEditing","isAddingSkill","newSkill","isAddingCertificate","newCertificate","ngOnInit","fetchProfile","getProfile","subscribe","data","profile","skills","$values","map","skill","name","console","log","error","toggleEdit","updateProfile","updatedData","phone","email","age","address","response","editProfilePicture","fileInput","document","createElement","type","accept","onchange","event","target","files","uploadProfilePicture","click","navigateToWorkExperience","navigate","toggleAddSkill","onAddSkill","addSkill","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\MyProfile\\WebUI\\src\\app\\profile\\profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ProfileService } from '../_services/profile.service';\r\nimport { Router } from '@angular/router';\r\nimport { Skill } from '../models/skill';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  profile: any;\r\n  selectedFile: File | null = null;\r\n  isEditing: boolean = false;\r\n  isAddingSkill: boolean = false;\r\n  newSkill: string = '';\r\n  isAddingCertificate: boolean = false;\r\n  newCertificate: string = '';\r\n\r\n  constructor(private profileService: ProfileService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchProfile();\r\n  }\r\n\r\n  fetchProfile(): void {\r\n    this.profileService.getProfile().subscribe(\r\n      (data) => {\r\n        this.profile = data;\r\n\r\n        // Check if skills have values and extract them\r\n        if (this.profile.skills && this.profile.skills.$values) {\r\n          this.profile.skills = this.profile.skills.$values.map((skill: Skill) => skill.name); \r\n        } else {\r\n          this.profile.skills = []; // Ensure skills is an array\r\n        }\r\n\r\n        console.log('Fetched profile:', this.profile);\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching profile data', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Toggle edit mode\r\n  toggleEdit() {\r\n    this.isEditing = !this.isEditing;\r\n  }\r\n\r\n  // Update the profile details\r\n  updateProfile() {\r\n    const updatedData = {\r\n      name: this.profile.name,\r\n      phone: this.profile.phone,\r\n      email: this.profile.email,\r\n      age: this.profile.age,\r\n      address: this.profile.address\r\n    };\r\n\r\n    this.profileService.updateProfile(updatedData).subscribe(\r\n      response => {\r\n        console.log('Profile updated successfully', response);\r\n        this.isEditing = false; // Exit edit mode after successful update\r\n        this.fetchProfile(); // Refresh the profile data\r\n      },\r\n      error => {\r\n        console.error('Error updating profile', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Open file input for editing the profile picture\r\n  editProfilePicture() {\r\n    const fileInput = document.createElement('input');\r\n    fileInput.type = 'file';\r\n    fileInput.accept = 'image/*';\r\n    fileInput.onchange = (event) => {\r\n      const target = event.target as HTMLInputElement;\r\n      if (target.files) {\r\n        this.selectedFile = target.files[0];\r\n        this.uploadProfilePicture();\r\n      }\r\n    };\r\n    fileInput.click();\r\n  }\r\n\r\n  // Upload the selected profile picture\r\n  uploadProfilePicture() {\r\n    if (this.selectedFile) {\r\n      this.profileService.uploadProfilePicture(this.selectedFile).subscribe(\r\n        response => {\r\n          console.log('Profile picture uploaded successfully', response);\r\n          this.fetchProfile(); // Fetch updated profile to reflect new picture URL\r\n        },\r\n        error => {\r\n          console.error('Error uploading profile picture', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  // Navigate to the work experience section\r\n  navigateToWorkExperience() {\r\n    this.router.navigate(['/workexperience']);\r\n  }\r\n\r\n  // Toggle adding skill form\r\n  toggleAddSkill() {\r\n    this.isAddingSkill = !this.isAddingSkill;\r\n    this.newSkill = ''; // Clear input when toggling\r\n  }\r\n\r\n  // Add a new skill\r\n  onAddSkill() {\r\n    if (this.newSkill) {\r\n      this.profileService.addSkill(this.newSkill).subscribe(\r\n        response => {\r\n          console.log('Skill added successfully:', response);\r\n          this.fetchProfile(); // Refresh profile to show updated skills\r\n          this.newSkill = ''; // Clear skill input\r\n          this.isAddingSkill = false; // Close add skill form\r\n        },\r\n        error => {\r\n          console.error('Error adding skill:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAS3BC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAPlE,KAAAC,YAAY,GAAgB,IAAI;IAChC,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,aAAa,GAAY,KAAK;IAC9B,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,mBAAmB,GAAY,KAAK;IACpC,KAAAC,cAAc,GAAW,EAAE;EAEmD;EAE9EC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAYA,CAAA;IACV,IAAI,CAACT,cAAc,CAACU,UAAU,EAAE,CAACC,SAAS,CACvCC,IAAI,IAAI;MACP,IAAI,CAACC,OAAO,GAAGD,IAAI;MAEnB;MACA,IAAI,IAAI,CAACC,OAAO,CAACC,MAAM,IAAI,IAAI,CAACD,OAAO,CAACC,MAAM,CAACC,OAAO,EAAE;QACtD,IAAI,CAACF,OAAO,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM,CAACC,OAAO,CAACC,GAAG,CAAEC,KAAY,IAAKA,KAAK,CAACC,IAAI,CAAC;OACpF,MAAM;QACL,IAAI,CAACL,OAAO,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC;;;MAG5BK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACP,OAAO,CAAC;IAC/C,CAAC,EACAQ,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,CACF;EACH;EAEA;EACAC,UAAUA,CAAA;IACR,IAAI,CAACnB,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;EAClC;EAEA;EACAoB,aAAaA,CAAA;IACX,MAAMC,WAAW,GAAG;MAClBN,IAAI,EAAE,IAAI,CAACL,OAAO,CAACK,IAAI;MACvBO,KAAK,EAAE,IAAI,CAACZ,OAAO,CAACY,KAAK;MACzBC,KAAK,EAAE,IAAI,CAACb,OAAO,CAACa,KAAK;MACzBC,GAAG,EAAE,IAAI,CAACd,OAAO,CAACc,GAAG;MACrBC,OAAO,EAAE,IAAI,CAACf,OAAO,CAACe;KACvB;IAED,IAAI,CAAC5B,cAAc,CAACuB,aAAa,CAACC,WAAW,CAAC,CAACb,SAAS,CACtDkB,QAAQ,IAAG;MACTV,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAES,QAAQ,CAAC;MACrD,IAAI,CAAC1B,SAAS,GAAG,KAAK,CAAC,CAAC;MACxB,IAAI,CAACM,YAAY,EAAE,CAAC,CAAC;IACvB,CAAC,EACDY,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CACF;EACH;EAEA;EACAS,kBAAkBA,CAAA;IAChB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IACjDF,SAAS,CAACG,IAAI,GAAG,MAAM;IACvBH,SAAS,CAACI,MAAM,GAAG,SAAS;IAC5BJ,SAAS,CAACK,QAAQ,GAAIC,KAAK,IAAI;MAC7B,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAA0B;MAC/C,IAAIA,MAAM,CAACC,KAAK,EAAE;QAChB,IAAI,CAACrC,YAAY,GAAGoC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;QACnC,IAAI,CAACC,oBAAoB,EAAE;;IAE/B,CAAC;IACDT,SAAS,CAACU,KAAK,EAAE;EACnB;EAEA;EACAD,oBAAoBA,CAAA;IAClB,IAAI,IAAI,CAACtC,YAAY,EAAE;MACrB,IAAI,CAACF,cAAc,CAACwC,oBAAoB,CAAC,IAAI,CAACtC,YAAY,CAAC,CAACS,SAAS,CACnEkB,QAAQ,IAAG;QACTV,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAES,QAAQ,CAAC;QAC9D,IAAI,CAACpB,YAAY,EAAE,CAAC,CAAC;MACvB,CAAC,EACDY,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,CACF;;EAEL;EAEA;EACAqB,wBAAwBA,CAAA;IACtB,IAAI,CAACzC,MAAM,CAAC0C,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;EAC3C;EAEA;EACAC,cAAcA,CAAA;IACZ,IAAI,CAACxC,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;IACxC,IAAI,CAACC,QAAQ,GAAG,EAAE,CAAC,CAAC;EACtB;EAEA;EACAwC,UAAUA,CAAA;IACR,IAAI,IAAI,CAACxC,QAAQ,EAAE;MACjB,IAAI,CAACL,cAAc,CAAC8C,QAAQ,CAAC,IAAI,CAACzC,QAAQ,CAAC,CAACM,SAAS,CACnDkB,QAAQ,IAAG;QACTV,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAES,QAAQ,CAAC;QAClD,IAAI,CAACpB,YAAY,EAAE,CAAC,CAAC;QACrB,IAAI,CAACJ,QAAQ,GAAG,EAAE,CAAC,CAAC;QACpB,IAAI,CAACD,aAAa,GAAG,KAAK,CAAC,CAAC;MAC9B,CAAC,EACDiB,KAAK,IAAG;QACNF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,CACF;;EAEL;CAED;AAxHYvB,gBAAgB,GAAAiD,UAAA,EAL5BlD,SAAS,CAAC;EACTmD,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWpD,gBAAgB,CAwH5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}