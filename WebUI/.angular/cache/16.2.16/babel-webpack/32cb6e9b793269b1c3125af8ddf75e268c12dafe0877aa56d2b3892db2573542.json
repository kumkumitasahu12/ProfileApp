{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WorkExperienceService = /*#__PURE__*/(() => {\n  class WorkExperienceService {\n    constructor(http) {\n      this.http = http;\n      this.workExperiencesSubject = new BehaviorSubject([]);\n      this.workExperiences$ = this.workExperiencesSubject.asObservable();\n      this.apiUrl = 'https://localhost:5001/api/WorkExperience';\n    }\n    // Fetch work experiences and update the BehaviorSubject\n    fetchWorkExperiences() {\n      this.http.get(this.apiUrl).subscribe(response => {\n        if (response && response.$values && Array.isArray(response.$values)) {\n          this.workExperiencesSubject.next(response.$values);\n        } else {\n          console.warn('Unexpected response structure:', response);\n          this.workExperiencesSubject.next([]); // Reset to empty array if unexpected\n        }\n      }, error => {\n        console.error('Error fetching work experiences', error);\n        this.workExperiencesSubject.next([]); // Reset on error\n      });\n    }\n    // Add a new work experience and update the BehaviorSubject\n    addWorkExperience(workExperience) {\n      return this.http.post(this.apiUrl, workExperience).pipe(tap(newExperience => {\n        const currentExperiences = this.workExperiencesSubject.value;\n        this.workExperiencesSubject.next([...currentExperiences, newExperience]);\n      }));\n    }\n    static {\n      this.ɵfac = function WorkExperienceService_Factory(t) {\n        return new (t || WorkExperienceService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: WorkExperienceService,\n        factory: WorkExperienceService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return WorkExperienceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}