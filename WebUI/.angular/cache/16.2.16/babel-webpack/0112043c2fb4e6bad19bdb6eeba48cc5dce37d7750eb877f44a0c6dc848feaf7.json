{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WorkExperienceService {\n  constructor(http) {\n    this.http = http;\n    this.workExperiencesSubject = new BehaviorSubject([]);\n    this.workExperiences$ = this.workExperiencesSubject.asObservable();\n    this.apiUrl = 'https://localhost:5001/api/WorkExperience';\n  }\n  // Fetch work experiences and update the BehaviorSubject\n  fetchWorkExperiences() {\n    this.http.get(this.apiUrl).subscribe(response => {\n      if (response && response.$values && Array.isArray(response.$values)) {\n        this.workExperiencesSubject.next(response.$values);\n      } else {\n        console.warn('Unexpected response structure:', response);\n        this.workExperiencesSubject.next([]); // Reset to empty array if unexpected\n      }\n    }, error => {\n      console.error('Error fetching work experiences', error);\n      this.workExperiencesSubject.next([]); // Reset on error\n    });\n  }\n  // Add a new work experience and update the BehaviorSubject\n  addWorkExperience(workExperience) {\n    return this.http.post(this.apiUrl, workExperience).pipe(tap(newExperience => {\n      const currentExperiences = this.workExperiencesSubject.value;\n      this.workExperiencesSubject.next([...currentExperiences, newExperience]);\n    }));\n  }\n  static {\n    this.ɵfac = function WorkExperienceService_Factory(t) {\n      return new (t || WorkExperienceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WorkExperienceService,\n      factory: WorkExperienceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","WorkExperienceService","constructor","http","workExperiencesSubject","workExperiences$","asObservable","apiUrl","fetchWorkExperiences","get","subscribe","response","$values","Array","isArray","next","console","warn","error","addWorkExperience","workExperience","post","pipe","newExperience","currentExperiences","value","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\MyProfile\\WebUI\\src\\app\\_services\\work-experience.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { WorkExperience } from '../models/work-experience';\r\nimport { WorkExperienceResponse } from '../models/workExperienceResponse';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WorkExperienceService {\r\n  private workExperiencesSubject = new BehaviorSubject<WorkExperience[]>([]);\r\n  workExperiences$ = this.workExperiencesSubject.asObservable();\r\n  private apiUrl = 'https://localhost:5001/api/WorkExperience';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Fetch work experiences and update the BehaviorSubject\r\n  fetchWorkExperiences(): void {\r\n    this.http.get<WorkExperienceResponse>(this.apiUrl).subscribe(\r\n      (response) => {\r\n        if (response && response.$values && Array.isArray(response.$values)) {\r\n          this.workExperiencesSubject.next(response.$values);\r\n        } else {\r\n          console.warn('Unexpected response structure:', response);\r\n          this.workExperiencesSubject.next([]); // Reset to empty array if unexpected\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching work experiences', error);\r\n        this.workExperiencesSubject.next([]); // Reset on error\r\n      }\r\n    );\r\n  }\r\n\r\n  // Add a new work experience and update the BehaviorSubject\r\n  addWorkExperience(workExperience: WorkExperience): Observable<WorkExperience> {\r\n    return this.http.post<WorkExperience>(this.apiUrl, workExperience).pipe(\r\n      tap((newExperience) => {\r\n        const currentExperiences = this.workExperiencesSubject.value;\r\n        this.workExperiencesSubject.next([...currentExperiences, newExperience]);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAGlD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,sBAAsB,GAAG,IAAIL,eAAe,CAAmB,EAAE,CAAC;IAC1E,KAAAM,gBAAgB,GAAG,IAAI,CAACD,sBAAsB,CAACE,YAAY,EAAE;IACrD,KAAAC,MAAM,GAAG,2CAA2C;EAEpB;EAExC;EACAC,oBAAoBA,CAAA;IAClB,IAAI,CAACL,IAAI,CAACM,GAAG,CAAyB,IAAI,CAACF,MAAM,CAAC,CAACG,SAAS,CACzDC,QAAQ,IAAI;MACX,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAACC,OAAO,CAAC,EAAE;QACnE,IAAI,CAACR,sBAAsB,CAACW,IAAI,CAACJ,QAAQ,CAACC,OAAO,CAAC;OACnD,MAAM;QACLI,OAAO,CAACC,IAAI,CAAC,gCAAgC,EAAEN,QAAQ,CAAC;QACxD,IAAI,CAACP,sBAAsB,CAACW,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;;IAE1C,CAAC,EACAG,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,IAAI,CAACd,sBAAsB,CAACW,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC,CACF;EACH;EAEA;EACAI,iBAAiBA,CAACC,cAA8B;IAC9C,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAiB,IAAI,CAACd,MAAM,EAAEa,cAAc,CAAC,CAACE,IAAI,CACrEtB,GAAG,CAAEuB,aAAa,IAAI;MACpB,MAAMC,kBAAkB,GAAG,IAAI,CAACpB,sBAAsB,CAACqB,KAAK;MAC5D,IAAI,CAACrB,sBAAsB,CAACW,IAAI,CAAC,CAAC,GAAGS,kBAAkB,EAAED,aAAa,CAAC,CAAC;IAC1E,CAAC,CAAC,CACH;EACH;;;uBAjCWtB,qBAAqB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAArB5B,qBAAqB;MAAA6B,OAAA,EAArB7B,qBAAqB,CAAA8B,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}